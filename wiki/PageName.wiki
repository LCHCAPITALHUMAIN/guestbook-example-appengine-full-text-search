= How to maka a gae application searchable using self merge joins =
== Abstract ==
Many complain that Google App Engine is not able to do a full text search. However, using the presentation of Bratt Slatkin at Google IO the implementation is pretty straight forward. The following article will give a practical introduction how to implement full text search on GAE. The code will be GAE/J + JDO only, but the concepts can be easily converted into Python or JPA.

== Goal ==
 * Develop a searchable guestbook example (much like the one shipped with the SDK) 
 * The full text search should be fuzzy within limits.

== Some things before we start ==
 * *Self merge joins and list properties*: You can query an entity efficiently based on so called "list properties" via self merge joins. I will not talk about that in detail, but you should watch Brett's excellent talk at Google IO 09 about the topic. It will answer everything: Google I/O 2009 - Building Scalable, Complex Apps on App Engine http://www.youtube.com/watch?v=AgaL6NGpkB8

 * *Full Text Search (FTS)*: Well. FTS is a really huge topic and can be done in a myriad of different ways. Check out wikipedia for a primer: http://en.wikipedia.org/wiki/Full_text_search

 * *The art of stemming*: One of the most basic things to enable some kind of inexact search is so called "stemming". It's the reduction of words towards their basic form. http://en.wikipedia.org/wiki/Stemming


Preparations:
The while project is availbale at google code: http://code.google.com/p/guestbook-example-appengine-full-text-search

This should make it really simple to browse the source and checkout the project so you can try it yourself.


1) Checkout the project
2) Basic layout:
- guestbook.jsp
- search.jsp
- GuestBookEntry.java

3) Full text layout:
SearchJanitor.java
SearchJanitorUtils.java



Workflow:


Stage 2:
Inexact full text search:





== Outlook ==
Some thoughts about where to got from here:
 * Add key only queries for more efficient searches
 * Add memcache support for fast queries
 * Add some secret sauce that enables you to "rank" results
 * Precompute date and timestamps to search for them. Don't search for ragens, but search for exact dates like 2009-10 (all entries in August 2009).


== Limitations of the approach ==
 * 1MB limit on entities
 * Number of terms to search for limited (max around 5 => but precise enough)
 * If you get too many results the search will not work. you have to make sure you are searching in a subset of the data with less than ~200 results.


== Summary ==
This post showed you how to use self merge joins to index entities of the Google App Engine and make them searchable. The approach has limitations, but it proves that the GAE can be made full text searchable.







Nico Güttler, B.Sc.
Studied Computational Biology at the Free University Berlin, graduating with a Bachelor of Science (B. Sc.). During college courses and a side job at the Charité University Medicine Center Berlin, he gained experience in different programming languages, web programming and algorithms.
Besides SCISURFER he is pursuing the Master in Computational Biology.

Dominic Jansen, M.Sc.


Dr. Raphael Andre Bauer
10 years of experience in industry and academia. Current project scisurfer.com, you can hire him for a talk or hands on introduction at xop3.com